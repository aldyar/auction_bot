from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Filter, Command,CommandStart
from aiogram.fsm.context import FSMContext
from config import ADMIN
from function.bid_func import BidFunction as Bid
from function.user_func import UserFunction as User
from function.admin_func import AdminFunction
import app.keyboards as kb
from handlers.user_group import timer
from aiogram import Bot

admin = Router()


class Admin(Filter):
    async def __call__(self, message: Message):
        return message.from_user.id in ADMIN
    

@admin.message(Admin(),F.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
async def admin_stat_handler(message:Message):
    bids = await Bid.get_all_bids()
    users = await User.get_all_users()
    active_users = await AdminFunction.get_active_users()
    sold_bids = await AdminFunction.get_sold_bids()
    not_sold_bids = await AdminFunction.get_not_sold_bids()

    revenue = sum(bid.sold_price or 0 for bid in bids)
    average_price = revenue / len(sold_bids) if sold_bids else 0  # –∏–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 0
    bids_count = len(bids)
    not_sold_percent = 100*(len(sold_bids)/ bids_count)
    user_count = len(users.all())
    active_users_count = len(active_users)
    await message.answer(
        f"*üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞—è–≤–∫–∞–º*\n\n"
        f"üîπ *–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫:* `{bids_count}`\n"
        f"üî∏ *–ü—Ä–æ–¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:* `{len(sold_bids)}`\n"
        f"üî∏ *–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫:* `{int(not_sold_percent)}%`\n\n"
        
        
        f"*üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º*\n\n"
        f"üîπ *–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* `{user_count}`\n"
        f"üî∏ *–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:* `{active_users_count}`\n\n"
        
        f"*üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
        f"üîπ *–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞:* `{revenue} –†`\n"
        f"üîπ *–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –∑–∞—è–≤–∫—É:* `{average_price} –†` \n\n"
        
        f"üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç –∑–∞–ø—Ä–æ—Å–∞*\n",
        parse_mode='Markdown', reply_markup=kb.inline_admin_stat
    )
    

@admin.callback_query(Admin(),F.data == 'day')
async def admin_stat_day_handler(callback:CallbackQuery):
    await callback.answer()
    bids = await AdminFunction.get_total_bids_by_period(1)
    sold_bids = await AdminFunction.get_sold_bids_by_period(1)
    users = await AdminFunction.get_users_by_registration_period(1)
    active_users = await AdminFunction.get_active_users_by_period(1)

    revenue = sum(bid.sold_price or 0 for bid in bids)
    average_price = revenue / len(sold_bids) if sold_bids else 0  # –∏–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 0
    not_sold_percent = 0 if not bids else 100 * (len(sold_bids) / len(bids))
    await callback.message.answer(
        f"*üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 24 —á–∞—Å–∞*\n\n"
        f"*üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞—è–≤–∫–∞–º*\n\n"
        f"üîπ *–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫:* `{len(bids)}`\n"
        f"üî∏ *–ü—Ä–æ–¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:* `{len(sold_bids)}`\n"
        f"üî∏ *–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫:* `{int(not_sold_percent)}%`\n\n"

        f"*üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º*\n\n"
        f"üîπ *–ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ 24 —á–∞—Å–∞:* `{len(users)}`\n"
        f"üî∏ *–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ 24 —á–∞—Å–∞:* `{len(active_users)}`\n\n"

        f"*üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
        f"üîπ *–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞:* `{revenue} –†`\n"
        f"üîπ *–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –∑–∞—è–≤–∫—É:* `{average_price} –†` \n\n",
        parse_mode='Markdown'
    )   

@admin.callback_query(Admin(),F.data == 'week')
async def admin_stat_day_handler(callback:CallbackQuery):
    await callback.answer()
    bids = await AdminFunction.get_total_bids_by_period(7)
    sold_bids = await AdminFunction.get_sold_bids_by_period(7)
    users = await AdminFunction.get_users_by_registration_period(7)
    active_users = await AdminFunction.get_active_users_by_period(7)

    revenue = sum(bid.sold_price or 0 for bid in bids)
    average_price = revenue / len(sold_bids) if sold_bids else 0  # –∏–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 0
    not_sold_percent = 0 if not bids else 100 * (len(sold_bids) / len(bids))
    await callback.message.answer(
        f"*üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é*\n\n"
        f"*üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞—è–≤–∫–∞–º*\n\n"
        f"üîπ *–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫:* `{len(bids)}`\n"
        f"üî∏ *–ü—Ä–æ–¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:* `{len(sold_bids)}`\n"
        f"üî∏ *–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫:* `{int(not_sold_percent)}%`\n\n"

        f"*üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º*\n\n"
        f"üîπ *–ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é:* `{len(users)}`\n"
        f"üî∏ *–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –Ω–µ–¥–µ–ª—é:* `{len(active_users)}`\n\n"

        f"*üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
        f"üîπ *–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞:* `{revenue} –†`\n"
        f"üîπ *–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –∑–∞—è–≤–∫—É:* `{average_price} –†` \n\n",
        parse_mode='Markdown'
    )   


@admin.callback_query(Admin(),F.data == 'month')
async def admin_stat_day_handler(callback:CallbackQuery):
    await callback.answer()
    bids = await AdminFunction.get_total_bids_by_period(30)
    sold_bids = await AdminFunction.get_sold_bids_by_period(30)
    users = await AdminFunction.get_users_by_registration_period(30)
    active_users = await AdminFunction.get_active_users_by_period(30)

    revenue = sum(bid.sold_price or 0 for bid in bids)
    average_price = revenue / len(sold_bids) if sold_bids else 0  # –∏–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 0
    not_sold_percent = 0 if not bids else 100 * (len(sold_bids) / len(bids))
    await callback.message.answer(
        f"*üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü*\n\n"
        f"*üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞—è–≤–∫–∞–º*\n\n"
        f"üîπ *–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫:* `{len(bids)}`\n"
        f"üî∏ *–ü—Ä–æ–¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:* `{len(sold_bids)}`\n"
        f"üî∏ *–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫:* `{int(not_sold_percent)}%`\n\n"

        f"*üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º*\n\n"
        f"üîπ *–ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –º–µ—Å—è—Ü:* `{len(users)}`\n"
        f"üî∏ *–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –º–µ—Å—è—Ü:* `{len(active_users)}`\n\n"

        f"*üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
        f"üîπ *–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞:* `{revenue} –†`\n"
        f"üîπ *–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –∑–∞—è–≤–∫—É:* `{average_price} –†` \n\n",
        parse_mode='Markdown'
    )   

