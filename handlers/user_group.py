from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
import app.keyboards as kb
from function.bid_func import BidFunction as Bid
from function.user_func import UserFunction as User
from aiogram.enums import ChatAction
from aiogram import Bot
from config import GROUP_ID
import asyncio
import logging


user = Router()
logging.basicConfig(level=logging.INFO)

"""@user.message(Command("send_test"))
async def timer (message: Message):
    countdown_time = 300  # 5 –º–∏–Ω—É—Ç = 300 —Å–µ–∫—É–Ω–¥
    sent_message = await message.answer(f"‚è≥ –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á—ë—Ç: *{countdown_time // 60}:00* –º–∏–Ω—É—Ç",parse_mode='Markdown')
    
    for i in range(countdown_time - 1, -1, -1):
        if i % 1 == 0:  # –û–±–Ω–æ–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑ –≤ 5 —Å–µ–∫—É–Ω–¥
            minutes = i // 60
            sec = i % 60
            await sent_message.edit_text(f"‚è≥ –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á—ë—Ç: *{minutes}:{sec:02d}*",parse_mode='Markdown')
        
        await asyncio.sleep(1)
    
    await sent_message.edit_text("‚úÖ –í—Ä–µ–º—è –≤—ã—à–ª–æ!")"""


@user.message(Command("get_chat_id"))
async def get_chat_id(message: Message):
    await message.answer(f"Chat ID: {message.chat.id}")

@user.message(F.text =='text')
async def test_handler(message:Message):
    bid = await Bid.get_bid()
    await message.answer(f'Id: {bid.id}')


@user.message(Command("send_test"))
async def timer(message: Message,bid_id):
    countdown_time = 30  # 5 –º–∏–Ω—É—Ç = 300 —Å–µ–∫—É–Ω–¥
    sent_message = await message.answer(
        f"‚è≥ –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á—ë—Ç: *{countdown_time // 60}:00* –º–∏–Ω—É—Ç\n\n",
        parse_mode='Markdown'
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é get_bid
    bid = await Bid.get_bid_by_id(bid_id)  # –≤—ã–∑–æ–≤ —Ç–≤–æ–µ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
    
    if bid is None:
        await sent_message.edit_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    await Bid.set_active_bid(bid.id,bid.start_price,bid.blitz_price)

    keyboard = await kb.inline_bids_keyboard(bid.id)
    
    for i in range(countdown_time - 1, -1, -1):
        if i % 1 == 0:  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑ –≤ 5 —Å–µ–∫—É–Ω–¥
            minutes = i // 60
            sec = i % 60
            active_bid = await Bid.get_active_bid(bid.id)
            if not active_bid:
                await sent_message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–∏ —Ü–∏–∫–ª–∞, –µ—Å–ª–∏ –æ–Ω –≤ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏)
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞—è–≤–∫–∏
            bid_info = (
                f"–¢–∏–ø –∑–∞—è–≤–∫–∏: {bid.request_type}\n"
                f"–í–æ–ø—Ä–æ—Å: {bid.question}\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {bid.category}\n"
                f"–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: {bid.start_price}\n"
                f"–ë–ª–∏—Ü-—Ü–µ–Ω–∞: {bid.blitz_price if bid.blitz_price else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n"
                f'–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:{active_bid.current_price}\n'
                f'–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å:{active_bid.tg_id if active_bid.tg_id else '–°—Ç–∞–≤–æ–∫ –ø–æ –ª–æ—Ç—É –Ω–µ –±—ã–ª–æ'}'
            )
            await sent_message.edit_text(
                f"‚è≥ –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á—ë—Ç: *{minutes}:{sec:02d}*\n\n{bid_info}",
                parse_mode='Markdown',reply_markup=keyboard
            )
            
        
        await asyncio.sleep(1)
    
    await sent_message.edit_text(f"‚úÖ –í—Ä–µ–º—è –≤—ã—à–ª–æ!\n\n{bid_info}")
    await Bid.delete_active_bid(bid.id)
    if active_bid.tg_id is not None:
        await Bid.buy_bid(message.from_user.id, bid.id,active_bid.current_price)
        await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {active_bid.tg_id} –≤—ã–∫—É–ø–∏–ª, –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞ : {active_bid.current_price}')
    # if active_bid:
    #     await buy_bid(message.from_user.id, bid.id)
    #     await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {active_bid.tg_id} –≤—ã–∫—É–ø–∏–ª')
    #     await delete_active_bid(bid.id)
    # else:
    #     await message.answer("‚ùå –°—Ç–∞–≤–æ–∫ –Ω–µ –±—ã–ª–æ. –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–Ω–æ–≤–æ...")
    #     await delete_active_bid(bid.id)
    #     await timer(message)  # üî• –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ö–µ–Ω–¥–ª–µ—Ä–∞


@user.callback_query(F.data.startswith('50bids_'))
async def auction_50_handler(callback:CallbackQuery):
    bid_id = callback.data.split('_')[1]
    user_id = callback.from_user.id
    current = 50
    user = await get_user(user_id)
    active_bid = await Bid.get_active_bid(bid_id)
    price = active_bid.blitz_price
    if user.balance < price + 50:
        return await callback.answer('–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Ç—Å–≤',show_alert=True)
    await Bid.update_active_bid(bid_id,user_id,current)
    await callback.answer()


@user.callback_query(F.data.startswith('100bids_'))
async def auction_100_handler(callback:CallbackQuery):
    bid_id = callback.data.split('_')[1]
    user_id = callback.from_user.id
    current = 100
    user = await get_user(user_id)
    active_bid = await Bid.get_active_bid(bid_id)
    price = active_bid.blitz_price
    if user.balance < price + 100:
        return await callback.answer('–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Ç—Å–≤',show_alert=True)
    await Bid.update_active_bid(bid_id,user_id,current)
    await callback.answer()


@user.callback_query(F.data.startswith('blitz_'))
async def blitz_handler(callback:CallbackQuery):
    bid_id = callback.data.split('_')[1]
    user_id = callback.from_user.id
    user = await get_user(user_id)
    active_bid = await Bid.get_active_bid(bid_id)
    price = active_bid.blitz_price
    if user.balance < price:
        return await callback.answer('–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Ç—Å–≤',show_alert=True)
    await Bid.buy_bid(user_id,bid_id,price)
    await Bid.delete_active_bid(bid_id)
    await callback.message.answer(f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–∫—É–ø–∏–ª –∑–∞—è–≤–∫—É'
                                  f'–ü–æ —Ü–µ–Ω–µ: {price}')
