from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Filter, Command,CommandStart
from aiogram.fsm.context import FSMContext
from config import ADMIN
from function.bid_func import BidFunction as Bid
import app.keyboards as kb
from handlers.user_group import timer
from aiogram import Bot

admin = Router()


class Admin(Filter):
    async def __call__(self, message: Message):
        return message.from_user.id in ADMIN
    

@admin.message(Admin(), CommandStart())
async def admin_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',reply_markup=kb.admin_menu)


@admin.message(Admin(),F.text == '–ó–∞—è–≤–∫–∏')
async def bid_handler(message:Message):
    await message.answer(
    "*üîπ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏* ‚Äî —ç—Ç–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω—ã –∏ —É—á–∞—Å—Ç–≤—É—é—Ç –≤ –∞—É–∫—Ü–∏–æ–Ω–µ –≤ –≥—Ä—É–ø–ø–µ.\n"
    "*üïì –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏* ‚Äî –æ–∂–∏–¥–∞—é—Ç –≤–∞—à–µ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.\n\n"
    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ ‚§µÔ∏è",
    reply_markup=kb.inline_admin_bid,
    parse_mode="Markdown"
)


@admin.callback_query(Admin(),F.data == 'NewBids')
async def new_bids_handler(callback:CallbackQuery):
    bids = await Bid.get_new_bids()
    await callback.answer()
    for bid in bids:
        text = (
            f"*üìå –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ‚Ññ{bid.id}*\n\n"
            f"*üë§ –ò–º—è:* {bid.full_name}\n"
            f"*üìû –¢–µ–ª–µ—Ñ–æ–Ω:* {bid.phone}\n"
            f"*üìÖ –î–∞—Ç–∞ –∑–∞—è–≤–∫–∏:* {bid.request_date.strftime('%d.%m.%Y %H:%M')}\n"
            f"*üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {bid.category}\n"
            f"*‚ùì –í–æ–ø—Ä–æ—Å:* {bid.question}\n"
            f"*üíº –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞:* {bid.request_type}\n"
            f"*üí∞ –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞:* {bid.start_price}‚Ç∏\n"
            f"*‚ö° –ë–ª–∏—Ü-—Ü–µ–Ω–∞:* {bid.blitz_price if bid.blitz_price else '‚Äî'}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —ç—Ç–æ–π –∑–∞—è–≤–∫–∏ ‚§µÔ∏è"
        )
        keyboard = await kb.inline_accept_bid(bid.id)
        await callback.message.answer(text, parse_mode="Markdown",reply_markup=keyboard)

@admin.callback_query(Admin(),F.data.startswith('AcceptBid_'))
async def accept_bid_handler(callback:CallbackQuery,bot:Bot):
    bid_id = callback.data.split("_")[1]
    await Bid.mark_bid_taken(bid_id)
    await callback.answer()
    await timer(callback.message, bid_id,bot)
    

@admin.callback_query(Admin(), F.data == 'ActiveBids')
async def active_bids_handler(callback:CallbackQuery):   
    bids = await Bid.get_all_active_bids()
    await callback.answer()
    if not bids:
        return await callback.message.answer('*–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç*',parse_mode='Markdown')
    for bid in bids:
        text = (
            f"*üìå –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ‚Ññ{bid.id}*\n\n"
            f"*üë§ –ò–º—è:* {bid.full_name}\n"
            f"*üìû –¢–µ–ª–µ—Ñ–æ–Ω:* {bid.phone}\n"
            f"*üìÖ –î–∞—Ç–∞ –∑–∞—è–≤–∫–∏:* {bid.request_date.strftime('%d.%m.%Y %H:%M')}\n"
            f"*üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {bid.category}\n"
            f"*‚ùì –í–æ–ø—Ä–æ—Å:* {bid.question}\n"
            f"*üíº –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞:* {bid.request_type}\n"
            f"*üí∞ –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞:* {bid.start_price}‚Ç∏\n"
            f"*‚ö° –ë–ª–∏—Ü-—Ü–µ–Ω–∞:* {bid.blitz_price if bid.blitz_price else '‚Äî'}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —ç—Ç–æ–π –∑–∞—è–≤–∫–∏ ‚§µÔ∏è"
        )
        await callback.message.answer(text, parse_mode="Markdown")
