from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from app.states import InvalidBid
from aiogram.fsm.context import FSMContext
import app.keyboards as kb
from function.bid_func import BidFunction as Bid
from function.user_func import UserFunction as User
from aiogram.enums import ChatAction
from aiogram import Bot

user = Router()



@user.message(F.text == 'üßæ–ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫')
async def history_bid_handler(message: Message):
    bids = await Bid.get_user_bid_history(message.from_user.id)
    if not bids:
        return await message.answer('‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.')

    for bid in bids:
        text = (
            f"üìÑ *–ó–∞—è–≤–∫–∞ ‚Ññ{bid.id}*\n"
            f"üßë *–§–ò–û:* *{bid.full_name}*\n"
            f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* `{bid.phone}`\n"
            f"üìå *–¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞:* *{bid.request_type}*\n"
            f"üìÇ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* *{bid.category}*\n"
            f"‚ùì *–í–æ–ø—Ä–æ—Å:* {bid.question}\n"
        )
        keyboard = await kb.inline_invalid_bid(bid.id)
        await message.answer(text, parse_mode="Markdown",reply_markup=keyboard)


@user.callback_query(F.data.startswith('InvalidBId_'))
async def invalid_bid_handler(callback:CallbackQuery,state: FSMContext):
    bid_id = callback.data.split("_")[1]
    await state.update_data(bid_id=int(bid_id))
    await callback.message.delete()
    await callback.message.answer('‚è≥*–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏—á–∏–Ω—É:*',parse_mode='Markdown')
    await state.set_state(InvalidBid.text)


@user.message(InvalidBid.text)
async def wait_text_handler(message:Message, state:FSMContext):
    print("üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ InvalidBid")
    data = await state.get_data()
    print(f"üîç –î–∞–Ω–Ω—ã–µ –∏–∑ FSM: {data}")
    bid_id = data.get("bid_id")  # –¥–æ—Å—Ç–∞–µ–º –∞–π–¥–∏ –∏–∑ FSM

    reason = message.text
    print(f"‚úèÔ∏è –ü—Ä–∏—á–∏–Ω–∞: {reason}")
    await message.answer('‚è≥*–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É*',parse_mode='Markdown')
    print(f"üì§ –í—ã–∑—ã–≤–∞–µ–º change_to_invalid_bid —Å bid_id={bid_id} –∏ reason='{reason}'")

    await Bid.change_to_invalid_bid(bid_id, reason)
    await state.clear()