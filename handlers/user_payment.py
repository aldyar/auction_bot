from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from app.states import InvalidBid
from aiogram.fsm.context import FSMContext
import app.keyboards as kb
from function.bid_func import BidFunction as Bid
from function.user_func import UserFunction as User
from aiogram.enums import ChatAction
from aiogram import Bot
from function.order_func import OrderFunction as Order
import json
from app.states import User as UserState

from aiogram.types import LabeledPrice
from aiogram.types import PreCheckoutQuery
from config import PROVIDER_TOKEN

user = Router()


@user.message(F.text == '‚ûï–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å')
async def add_funds_handler(message:Message):
    text = (
        "*üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞*\n\n"
        "*–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ –ÆKassa. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å—É–º–º –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Å—É–º–º—É –≤—Ä—É—á–Ω—É—é.*\n\n"
        "üîπ* –î–ª—è –≤–≤–æ–¥–∞ —Å–≤–æ–µ–π —Å—É–º–º—ã –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É.*\n\n"
        "*–ú—ã –ø–æ–∑–∞–±–æ—Ç–∏–º—Å—è –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏ –±—ã—Å—Ç—Ä–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.*"
    )
    await message.answer(text,parse_mode='Markdown',reply_markup=kb.inline_add_funds)


@user.callback_query(F.data.startswith ('topup_'))
async def send_invoice(callback: CallbackQuery,bot:Bot):
    user_amount = int(callback.data.split('_')[-1])
    prices = [LabeledPrice(label="–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä", amount=user_amount*100)]  # 10000 –∫–æ–ø–µ–µ–∫ = 100.00 —Ä—É–±
    await callback.message.delete()
    await bot.send_invoice(
        chat_id=callback.message.chat.id,
        title="–¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞",
        description="–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂ —á–µ—Ä–µ–∑ –ÆKassa –≤ Telegram",
        payload="test_payload",
        provider_token=PROVIDER_TOKEN,
        currency="RUB",
        prices=prices,
        start_parameter="test-payment",
    )


@user.callback_query(F.data == 'MySum')
async def wait_user_sum(callback:CallbackQuery,state:FSMContext):
    await callback.message.delete()
    await callback.message.answer('*–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å*',parse_mode='Markdown')
    await state.set_state(UserState.wait_add_sum)


@user.message(UserState.wait_add_sum)
async def user_sum_handler(message:Message,state:FSMContext,bot:Bot):
    user_amount = int(message.text)
    prices = [LabeledPrice(label="–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä", amount=user_amount*100)]  # 10000 –∫–æ–ø–µ–µ–∫ = 100.00 —Ä—É–±
    await state.clear()

    await bot.send_invoice(
        chat_id=message.chat.id,
        title="–¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞",
        description="–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂ —á–µ—Ä–µ–∑ –ÆKassa –≤ Telegram",
        payload="test_payload",
        provider_token=PROVIDER_TOKEN,
        currency="RUB",
        prices=prices,
        start_parameter="test-payment",
    )


# ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π
@user.pre_checkout_query()
async def pre_checkout_query_handler(query: PreCheckoutQuery,bot:Bot):
    await bot.answer_pre_checkout_query(query.id, ok=True)

# üí∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
@user.message(F.successful_payment)
async def successful_payment_handler(message: Message):
    tg_id = message.from_user.id 
    tg_order_id = message.successful_payment.telegram_payment_charge_id
    provider_id = message.successful_payment.provider_payment_charge_id  
    amount = message.successful_payment.total_amount / 100  

    await Order.create_order( tg_id, tg_order_id, provider_id, amount)
    await Order.add_balance( tg_id, amount)
    await message.answer("‚úÖ–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")